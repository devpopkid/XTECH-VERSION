const config = require('../config');
const { cmd } = require('../command');

const cooldowns = new Map();

// ‚úÖ Stylish tagall command for admins and owner
cmd({
  pattern: "tagall",
  alias: ["gc_tagall"],
  react: "üîä",
  desc: "Mention all group members",
  category: "group",
  use: ".tagall [your message]",
  filename: __filename
}, async (conn, mek, m, {
  from,
  participants,
  reply,
  isGroup,
  senderNumber,
  groupAdmins,
  prefix,
  command
}) => {
  try {
    if (!isGroup) return reply("‚ùå *This command can only be used in groups!*");

    const botOwner = conn.user.id.split(":")[0];
    const senderJid = senderNumber + "@s.whatsapp.net";

    if (!groupAdmins.includes(senderJid) && senderNumber !== botOwner)
      return reply("üö´ *Only group admins or bot owner can use this command.*");

    if (participants.length > 250)
      return reply("üö´ *Group too large to mention all members (limit: 250).*");

    // ‚è≥ Cooldown check
    const lastUsed = cooldowns.get(from);
    const now = Date.now();
    const cooldown = 10 * 1000;
    if (lastUsed && now - lastUsed < cooldown)
      return reply(`‚è≥ *Please wait ${Math.ceil((cooldown - (now - lastUsed)) / 1000)}s before using again.*`);
    cooldowns.set(from, now);

    const metadata = await conn.groupMetadata(from);
    const groupName = metadata.subject || "Group";
    const memberCount = participants.length;

    const msgText = (m.body || "").slice((prefix + command).length).trim() || "üö® *Attention everyone!*";

    const emojis = ["‚ö°", "üöÄ", "üõ°Ô∏è", "üì¢", "üéØ", "üî•", "üéâ", "üí¨", "üóØÔ∏è", "üîî"];
    const icon = emojis[Math.floor(Math.random() * emojis.length)];

    const time = new Date().toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });

    let caption = `‚ï≠‚îÄ‚îÄ üéØ *Group Broadcast* ‚îÄ‚îÄ‚¨£\n‚îÇ\n`;
    caption += `‚îú üè∑Ô∏è *Group:* ${groupName}\n`;
    caption += `‚îú üë• *Members:* ${memberCount}\n`;
    caption += `‚îú üó®Ô∏è *Message:* ${msgText}\n`;
    caption += `‚îú ‚è±Ô∏è *Time:* ${time}\n‚îÇ\n`;
    caption += `‚ï∞‚îÄ‚îÄ‚îÄ‚ü™ ùôàùôöùô£ùô©ùôûùô§ùô£ùô® ‚ü´‚îÄ‚îÄ‚îÄ‚¨£\n`;

    for (const user of participants) {
      if (user?.id === conn.user.id) continue;
      caption += `${icon} @${user.id.split('@')[0]}\n`;
    }

    caption += `\nüéñÔ∏è *Powered by PopkidXtech*`;

    await conn.sendMessage(from, {
      text: caption,
      mentions: participants.map(u => u.id),
      contextInfo: {
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: "120363420342566562@newsletter",
          newsletterName: "P·¥è·¥ò·¥ã…™·¥ÖX·¥õ·¥á·¥Ñ ú",
          serverMessageId: 143
        }
      }
    }, { quoted: mek });

  } catch (e) {
    console.error("TagAll Error:", e);
    reply("‚ùå An error occurred while tagging.");
  }
});


// ‚úÖ Owner-only tag command for private broadcast
cmd({
  pattern: "tag",
  desc: "Bot owner broadcast to all members",
  category: "group",
  use: ".tag <message>",
  react: "üì£",
  filename: __filename
}, async (conn, mek, m, {
  from,
  senderNumber,
  participants,
  q,
  reply
}) => {
  try {
    const botOwner = conn.user.id.split(":")[0];
    if (senderNumber !== botOwner)
      return reply("‚õî *Only Popkid (bot owner) can use this command.*");

    if (!q) return reply("‚ÑπÔ∏è *Please enter a message to broadcast.*");

    const time = new Date().toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });

    const msg = `‚ï≠‚îÄüíå *Owner Broadcast*\n‚îÇ\n`;
    msg += `‚îú üßë *From:* @${senderNumber}\n`;
    msg += `‚îú üó®Ô∏è *Message:* ${q}\n`;
    msg += `‚îú ‚è±Ô∏è *Time:* ${time}\n‚îÇ\n`;
    msg += `‚ï∞‚îÄüéØ *Mentions Below*`;

    await conn.sendMessage(from, {
      text: msg,
      mentions: participants.map(u => u.id),
      contextInfo: {
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: "120363420342566562@newsletter",
          newsletterName: "P·¥è·¥ò·¥ã…™·¥ÖX·¥õ·¥á·¥Ñ ú",
          serverMessageId: 143
        }
      }
    }, { quoted: mek });

  } catch (e) {
    console.error("Tag Error:", e);
    reply("‚ùå An error occurred while sending the tag.");
  }
});
